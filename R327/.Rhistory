coef(a)
abline(a)
a
coef(a)
b<-lm(farm~land,area)
abline(b)
plot.new()
abline(b)
plot(area$land,area$farm)
abline(b)
abline(a)
predict(a,quantile(area$land,c(0,.25,.5,.75,1)))
quantile(area$land,c(0,.25,.5,.75,1))
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
?lad
example(lad)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
library(devtools)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
lad
example(lad)
?print.lad
?coef.lad
?print.lad
?predict.lad
library("robust", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("robust")
install.packages("/Users/CDX/WISC_R_HWK/R327/robust_0.1.tar.gz",repos = NULL,type="source")
example(lad)
require(robust)
example(lad)''
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/WISC_R_HWK/R327/robust_0.1.tar.gz",repos = NULL,type="source")
library(robust)
lad
example(lad)
getwd
getwd()
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
library(devtools)
check("robust")#copy from http://pages.stat.wisc.edu/~jgillett/327-3/2package/jgUtilities/DESCRIPTION
build("robust")
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
library(robust)
example(lad)
library(lad)
library(robust)
lad
lad(area$land,area$farm)
a<-lad(area$land,area$farm)
predict(a,3)
print(a)
coef(a)
example(lad)
library(robust)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
example(lad)
a<-lad(area$land,area$farm)
coef(a)
example(lad)
example(lad)
a<-lad(area$land,area$farm)
coef(a)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example(lad)
.rdb' is corrupt
getwd()
check(robust)
heck(robust)
library(devtools)
check(robust)
check("robust")
check("robust")
build("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
library(robust)
example()
example(lad)
library(robust)
example(lad)
library(robust)
example(lad)
remove.packages("robust")
install.packages("/Users/CDX/robust_0.1.tar.gz",repos = NULL,type = "source")
require(robust)
example(robust)
require(robust)
example(lad)
?scake
?scale
scale(c(1,2,3,4))
((1:4)-2.5)/sd(1:4)
?princomp
address <- "http://www.stat.wisc.edu/~gvludwig/fall_2012/midterm2_problem1.csv"
PM2.5 <- read.csv(address, header=TRUE)
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1                    + I1, data = PM2.5)
summary(model <- lm(log(PM) ~ LAT + LON + MAX + MIN + PCP + N1 + S1 + A1 + C1 + F1+ I1, data = PM2.5)
)
X <- model.matrix(model)[,-1]
pc.cr <-princomp(scale(X))
plot(pc.cr)
pc.cr$loadings
pc.cr$loadings
x<-scale(X[,-1])
eigen(t(x)%*%x)$vectors
x<-scale(X)
eigen(t(x)%*%x)$vectors
pc.cr$loadings
svdx<-svd(x)
svdx$v
eigen(t(x)%*%x)$vectors
?eigen
?princomp
?svd
?eigen
eigen(t(x)%*%x)$vec
eigen(t(x)%*%x)$vectors
eigen(t(x)%*%x)$vec
library(rugarch)
?ugarchforecast
library(forecast)
?HoltWinters
?optim
install.packages("RSPerl")
install.packages()
install.packages("mcmc")
install.packages("coda")
?mcmc
help(mcmc)
help("mcmc")
install.packages("R2WinBUGS")
library(R2WinBUGS)
?bugs
data(schools)
schools
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list(J=J, y=y, sigma.y=sigma.y)
inits <- function(){
list(theta=rnorm(J, 0, 100), mu.theta=rnorm(1, 0, 100),
sigma.theta=runif(1, 0, 100))
}
parameters <- c("theta", "mu.theta", "sigma.theta")
model.file <- system.file(package="R2WinBUGS", "model", "schools.txt")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
WINE="usr/local/Cellar/wine/1.6.2/bin/wine",
WINEPATH="usr/local/Cellar/wine/1.6.2/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
WINE="usr/local/bin/wine",
WINEPATH="usr/local/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="/Applications/OpenBUGS/OpenBUGS323",
working.directory = ".",
useWINE=TRUE,
WINE="/usr/local/bin/wine",
WINEPATH="/usr/local/bin/winepath")
schools.sim <- bugs(data, inits, parameters, model.file,
n.chains=3, n.iter=5000,
bugs.directory="~/.wine/drive_c/Program Files/OpenBUGS",
working.directory = ".",
useWINE=TRUE,
WINE="/usr/local/bin/wine",
WINEPATH="/usr/local/bin/winepath")
data(schools)
#define the model
nummodel <- function(){
for (j in 1:J){
y[j] ~ dnorm (theta[j], tau.y[j])
theta[j] ~ dnorm (mu.theta, tau.theta)
tau.y[j] <- pow(sigma.y[j], -2)}
mu.theta ~ dnorm (0.0, 1.0E-6)
tau.theta <- pow(sigma.theta, -2)
sigma.theta ~ dunif (0, 1000)
}
# write the model code out to a file
write.model(nummodel, "nummodel.txt")
model.file1 = paste(getwd(),"nummodel.txt", sep="/")
## and let's take a look:
file.show("nummodel.txt")
J <- nrow(schools)
y <- schools$estimate
sigma.y <- schools$sd
data <- list ("J", "y", "sigma.y")
#initialization of variables
inits <- function(){
list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100), sigma.theta = runif(1, 0, 100))}
#set the WINE working directory and the directory to OpenBUGS - change the OpenBUGS.exe location as necessary
WINE="/usr/local/bin/wine"
WINEPATH="/usr/local/bin/winepath"
OpenBUGS.pgm="/Users/CDX/.wine/drive_c/Program Files/OpenBUGS/OpenBUGS323/OpenBUGS.exe"
#these are the parameters to save
parameters = c("theta", "mu.theta", "sigma.theta")
#run the model
schools.sim <- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000, OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
install.packages("R2OpenBUGS")
library(R2OpenBUGS)
schools.sim <- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
print(schools.sim)
remove.packages("R2WinBUGS")
getwd()
library(parallel)
detectCores()
lapply(1:5,function(x) x+2)
system.time(mclapply(1:5,function(x) x+2,mc.cores = 1))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 4))
system.time(lapply(1:5,function(x) x+2))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 1))
system.time(lapply(1:5,function(x) x+2))
system.time(mclapply(1:5,function(x) x+2,mc.cores = 4))
?"parLapply"
?"parallel-package"
?"paralle"
1:160000
d<-1:160000
cut(d,seq(d,d/4))
cut(d,seq(d,by=d/4))
cut(d,seq(d,by=160000/4))
?mcmapply
?mapply
?mcmapply
N=40
cut(1:N,seq(1:N,by = N/4))
cut(1:N,seq(1,N,by = N/4))
cut(0:N,seq(1,N,by = N/4))
cut(1:N,seq(0,N,by = N/4))
data("mtcars")
head(mtcars)
names(mtcars)
m1 <- lm.ridge(mpg~ cyl+disp+hp,lambda = seq(0,10,0.01))
install.packages("alr3")
library(alr3)
m1 <- lm.ridge(mpg~ cyl+disp+hp,lambda = seq(0,10,0.01))
library(MASS)
m1 <- lm.ridge(mpg~ cyl+disp+hp,lambda = seq(0,10,0.01))
library(MASS)
m1 <- lm.ridge(mpg~ cyl+disp+hp,lambda = seq(0,10,0.01))
?lm.ridge
m1 <- lm.ridge(mpg~ cyl+disp+hp,data = mtcars,lambda = seq(0,10,0.01))
?select
select(m1)
class(m1)
methods(select)
methods("select")
require(parallel)
?parLapply
?mapply
mapply(rep, 1:4, 4:1)
?mcmapply
mcmapply(rep, 1:4, 4:1)
system.time(mapply(rep, 1:4, 4:1))
system.time(mcmapply(rep, 1:4, 4:1))
library(png)
install.packages("png")
?distance
library(distance)
renewal = read.table("renewal.txt", header = FALSE)
renewal = read.table("~/CDX/Downloads/renewal.txt", header = FALSE)
renewal = read.table("~/Downloads/renewal.txt", header = FALSE)
names(renewal) = c("renew", "amt")
renewal$renew = factor(renewal$renew)
m_renewal = glm(renew ~ ., family = binomial, data = renewal)
cat(sep = "", "The maximum likelihood estimates of beta0 and beta1 of the logistic regression model are c(", m_renewal$coefficients[1], ", ", m_renewal$coefficients[2], ")")
```
m_renewal<-gml
plot(xj,m_renewal$fitted.values, ylim = c(0,1), main = "Fitted Logistic Response", xlab = "amt", ylab = "")
xj<- jitter(renewal$amt)
plot(xj,m_renewal$fitted.values, ylim = c(0,1), main = "Fitted Logistic Response", xlab = "amt", ylab = "")
renewal = read.table("~/Downloads/renewal.txt", header = FALSE)
names(renewal) = c("renew", "amt")
renewal$renew = factor(renewal$renew)
m_renewal = glm(renew ~ ., family = binomial, data = renewal)
cat(sep = "", "The maximum likelihood estimates of beta0 and beta1 of the logistic regression model are c(", m_renewal$coefficients[1], ", ", m_renewal$coefficients[2], ")")
str(renewal <- with(read.table("renewal.txt", sep=""),
data.frame(renew=factor(V1, levels=1:0,
labels=c("N","Y")), amt=V2)))
str(renewal <- with(read.table("~/Downloads/renewal.txt", sep=""),
data.frame(renew=factor(V1, levels=1:0,
labels=c("N","Y")), amt=V2)))
names(renewal) = c("renew", "amt")
renewal$renew = factor(renewal$renew)
m_renewal = glm(renew ~ ., family = binomial, data = renewal)
cat(sep = "", "The maximum likelihood estimates of beta0 and beta1 of the logistic regression model are c(", m_renewal$coefficients[1], ", ", m_renewal$coefficients[2], ")")
```
xj<- jitter(renewal$amt)
plot(xj,m_renewal$fitted.values, ylim = c(0,1), main = "Fitted Logistic Response", xlab = "amt", ylab = "")
points(xj, as.numeric(renewal$renew)-1)
lines(lowess(xj,renewal$renew), col = "red")
plot(xj,m_renewal$fitted.values, ylim = c(0,1), main = "Fitted Logistic Response", xlab = "amt", ylab = "")
points(xj, as.numeric(renewal$renew)-1)
lines(lowess(xj,renewal$renew), col = "red")
lines(lowess(renewal$amt,renewal$renew), col = "red")
lines(lowess(renewal$amt,renewal$renew), col = "green")
renewal
renewal$amt
lines(lowess(xj,as.numeric(renewal$renew)-1), col = "red")
getwd()
length(seq(-k,k,0.1))
k=120
length(seq(-k,k,0.1))
2401*2401
k=120
z<-function(b){
x<-b[1]
y<-b[2]
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
initials=c(0,0)
x<- seq(-k,k,by = 0.5);y<- seq(-k,k,by = 0.1)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
k=120
z<-function(b){
x<-b[1]
y<-b[2]
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
initials=c(0,0)
x<- seq(-k,k,by = 0.5);y<- seq(-k,k,by = 0.1)
x<- seq(-k,k,by = 0.5);y<- seq(-k,k,by = 0.5)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
start <- Sys.time()
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
getwd()
setwd("/Users/CDX/WISC_R_HWK/R327")
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(rgl)
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
localmin
x <- lapply(localmin, function(x) return(x$par[1]))
y <- lapply(localmin, function(x) return(x$par[2]))
z <- lapply(localmin, function(x) return(x$value))
points3d(x =x ,y =y ,z =z ,col = "red",size=4.5)
?optim
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,control = list(fnscale=-1),method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
k=120
z<-function(b){
x<-b[1]
y<-b[2]
((1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47))))))*(-1)
}
x<- seq(-k,k,by = 0.5);y<- seq(-k,k,by = 0.5)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
save(localmin,file = "localmin.RData")
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(rgl)
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
x <- sapply(localmin, function(x) return(x$par[1]))
y <- sapply(localmin, function(x) return(x$par[2]))
z <- sapply(localmin, function(x) return(x$value));z <- -z
points3d(x =x ,y =y ,z =z ,col = "red",size=4.5)
x<- seq(-k,k,by = 10);y<- seq(-k,k,by = 10)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
save(localmin,file = "localmin.RData")
```
x<- seq(-k,k,by = 10);y<- seq(-k,k,by = 10)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
k=120
z<-function(b){
x<-b[1]
y<-b[2]
((1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47))))))*(-1)
}
x<- seq(-k,k,by = 10);y<- seq(-k,k,by = 10)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
initials[[1]]
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
x <- sapply(localmin, function(x) return(x$par[1]))
y <- sapply(localmin, function(x) return(x$par[2]))
z <- sapply(localmin, function(x) return(x$value));z <- -z
points3d(x =x ,y =y ,z =z ,col = "red",size=4.5)
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(rgl)
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(rgl)
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
k=80
z<-function(b){
x<-b[1]
y<-b[2]
((1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47))))))*(-1)
}
x<- seq(-k,k,by = 10);y<- seq(-k,k,by = 10)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
save(localmin,file = "localmin.RData")
x <- sapply(localmin, function(x) return(x$par[1]))
y <- sapply(localmin, function(x) return(x$par[2]))
z <- sapply(localmin, function(x) return(x$value));z <- -z
points3d(x =x ,y =y ,z =z ,col = "red",size=4.5)
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(rgl)
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
k=80
z<-function(b){
x<-b[1]
y<-b[2]
((1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47))))))*(-1)
}
x<- seq(-k,k,by = 10);y<- seq(-k,k,by = 10)
x<-rep(x,length(x)); y<- sapply(y, function(x) rep(x,length(y)))
y<- as.vector(y)
initials<- rbind(x,y)
#split(initials)
initials<-lapply(1:ncol(initials), function(i) initials[,i])
require(parallel)
(start <- Sys.time())
localmin<-mclapply(initials,FUN = function(x) return(optim(par =c(x[1],x[2]),fn = z,method ="Nelder-Mead")),mc.cores = 4)
(end<- Sys.time())
save(localmin,file = "localmin.RData")
x <- sapply(localmin, function(x) return(x$par[1]))
y <- sapply(localmin, function(x) return(x$par[2]))
z <- sapply(localmin, function(x) return(x$value));z <- -z
points3d(x =x ,y =y ,z =z ,col = "red",size=4.5)
