getwd()
area <- read.csv("http://www.stat.wisc.edu/~jgillett/327-3/1/farmLandArea.csv")
str(area)
library(MASS)
plot(x = land,y = farm, data= area)
attach(area)
plot(x = land,y = farm)
?plot
plot(x = land,y = farm)
plot(lm(farm~land,data = area))
lse<-lm(farm~land,data = area)
plot(x = land,y = farm)
?lines
lines(x=land,y = lse$fitted.values)
lines(x=land,y = lse$fitted.values,col="limegreen")
library(MASS)
plot(x = land,y = farm)
lse<-lm(farm~land,data = area)
lines(x=land,y = lse$fitted.values,col="limegreen")
?sign
sign(-1)
sign(-6)
sign(6)
k=19000
rho<-function(x){
if( abs(x)<= k ) return(x^2)
else return(2*k*abs(x) - k^2)
}
rho.d<- function(x){
if( abs(x)<= k ) return(2*x)
else return(2*k*sign(x))
}
f1 = function(x) { # Define function z = f(x, y).
x1 <- x[1]#beta0
x2 <- x[2]#beta1
t<- area$farm- x1 - x2*area$land
turkey<- mean(rho(t))
return(turkey)
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
t<- area$farm- x1 - x2*area$land
grad <- c(-mean(rho.d(t)),
-mean(area$land*rho.d(t)))
return(grad)
}
optim(par = c(0,0),fn = f1, grr, method ="Nelder-Mead" )
lse
(robust<-optim(par = c(0,0),fn = f1, grr, method ="Nelder-Mead" ))
robust$par
lse$coefficients
lse$coefficients[1]
abline(robust$par)
abline(robust$par,col="navy")
options(warn=-1)
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="Nelder-Mead" ),silent = TRUE)
abline(robust$par,col="navy")
legend("topright",c("LSE","Robust"),col=c("green","blue"))
legend("topright",c("LSE","Robust"),col=c(1,2))
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="BFGS" ),silent = TRUE)
abline(robust$par,col="black")
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="CG" ),silent = TRUE)
abline(robust$par,col="coral")
lse<-lm(farm~land,data = area)
lines(x=land,y = lse$fitted.values,col="limegreen",lwd=1.5)
plot(x = land,y = farm)
lse<-lm(farm~land,data = area)
lines(x=land,y = lse$fitted.values,col="limegreen",lwd=1.5)
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="Nelder-Mead" ),silent = TRUE)
abline(robust$par,lwd=1.5,col="navy")
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="BFGS" ),silent = TRUE)
abline(robust$par,lwd=1.5,col="black")
try(robust<-optim(par = c(0,0),fn = f1, grr, method ="CG" ),silent = TRUE)
abline(robust$par,lwd=1.5,col="coral")
(try(robust<-optim(par = c(0,0),fn = f1, grr, method ="BFGS" ),silent = TRUE))
(try(robust<-optim(par = c(0,0),fn = f1, grr, method ="BFGS" ),silent = TRUE))
require(datasets)
str(nhtemp)
plot(nhtemp)
y<- nhtemp
y
y_hat<- nhtemp
y_hat[1]<-y_hat[2]<- nhtemp[1]
y_hat[1:5]
beta
fe<-function(b){
return(mean((nhtemp- yh(b))^2))
}
optimize(fe,c(0,1))
yh<-function(b){#return prediction
y_hat<- nhtemp
y_hat[1]<-y_hat[2]<- nhtemp[1]
for(i in 3:length(y_hat)){
y_hat[i]<- b*nhtemp[i-1] + (1-b)* y_hat[i-1]
}
return(y_hat)
}
fe<-function(b){
return(mean((nhtemp- yh(b))^2))
}
optimize(fe,c(0,1))
fe()
fe(0.1860812741293752)
optimize(fe,c(0,1))
plot(nhtemp)
plot(nhtemp,main="temperature for New Hampshire")
lines(yh(0.186))
plot(nhtemp,main="temperature for New Hampshire")
lines(yh(0.186),col=4)
plot(nhtemp,main="temperature for New Hampshire")
lines(yh(0.186),col="red")
plot(nhtemp,main="temperature for New Hampshire")
lines(yh(0.186),col="red",lwd=1.5)
lines(yh(0.1),col="blue",lwd=1.5)
lines(yh(0.9),col="yellow",lwd=1.5)
lines(yh(0.9),col="grey",lwd=1.5)
plot(nhtemp,main="temperature for New Hampshire")
lines(yh(0.186),col="red",lwd=1.5)
lines(yh(0.1),col="blue",lwd=1.5)
lines(yh(0.9),col="green",lwd=1.5)
plot(nhtemp,main="temperature for New Hampshire",lwd=2)
lines(yh(0.186),col="red",lwd=1.5)
lines(yh(0.1),col="blue",lwd=1.5)
lines(yh(0.9),col="green",lwd=1.5)
```
data("mtcars")
str(mtcars)
x<-mtcars$mpg
length(x)
x<-mtcars$mpg
likelihood <- function(mu,sigma){
n=length(x)
return(n*log(1/ sqrt(2*pi*sigma^2)) - (1/(2*sigma^2))*sum((x-mu)^2))
}
f1 <- function(x){
mu <- x[1]
sigma <- x[2]
n=length(dat)
likelihood<-(n*log(1/ sqrt(2*pi*sigma^2)) - (1/(2*sigma^2))*sum((dat-mu)^2))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
mu <- x[1]
sigma <- x[2]
n=length(dat)
grad <- c((-1/sigma^2)*sum(dat-mu),
n*2*pi*sigma + sigma^(-3)*sum((dat-mu)^2))
grad <- -grad
return(grad)
}
optim(par = c(mean(dat),sd(dat)),fn = f1, grr, method ="Nelder-Mead" )
dat<-mtcars$mpg
optim(par = c(mean(dat),sd(dat)),fn = f1, grr, method ="Nelder-Mead" )
mean(dat)
sd(dat)
require("MASS")
menarche[c(1, 10, 25), ]
p
p
p
p
success.indices = rep(x=seq_len(nrow(menarche)), times=menarche$Menarche)
success.ages = menarche$Age[success.indices]
success = data.frame(age=success.ages, reached.menarche=1)
failure.indices = rep(x=seq_len(nrow(menarche)), times=menarche$Total - menarche$Menarche)
failure.ages = menarche$Age[failure.indices]
failure = data.frame(age=failure.ages, reached.menarche=0)
menarche.cases = rbind(success, failure)
menarche.cases = menarche.cases[order(menarche.cases$age), ]
rownames(menarche.cases) = NULL # Remove incorrectly ordered rownames; they get restored correctly.
menarche.cases[c(1000, 1500, 2000), ]
menarche.cases
levels(menarche.cases$age)
menarche.cases$age<- jitter(menarche.cases$age)
menarche
menarche$Age
menarche.cases$Age
menarche.cases$age
menarche.cases$reached.menarche
product(c(1,2,3))
prod()
?prod
prod(1:4)
grr <- function(x) { ## Gradient of 'fr'
mu <- x[1]
sigma <- x[2]
n=length(dat)
grad <- c(- sum(exp(b0+b1*xx)/(1+exp(b0+b1*xx)))+sum(yy),
- sum(exp(b0+b1*xx)*xx/(1+exp(b0+b1*xx))) + sum(yy*xx) )
f1 <- function(x){
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
likelihood<- -sum(log(1+exp(b0+b1*xx))) + sum(yy*(b0+b1**xx))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
b0 <- x[1]
f1 <- function(x){
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
likelihood<- -sum(log(1+exp(b0+b1*xx))) + sum(yy*(b0+b1**xx))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
grad <- c(- sum(exp(b0+b1*xx)/(1+exp(b0+b1*xx)))+sum(yy),
- sum(exp(b0+b1*xx)*xx/(1+exp(b0+b1*xx))) + sum(yy*xx) )
grad <- -grad
return(grad)
}
optim(par = c(0,0)), fn = f1, grr, method ="Nelder-Mead" )
optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" )
?glm
log<-glm(reached.menarche~age, family=family.generator,
data= menarche.cases )
log<-glm(reached.menarche~age, family=binomial,
data= menarche.cases )
summary(log)
menarche.cases$age
f1 <- function(x){#negative log likelihood
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
likelihood<- -sum(log(1+exp(b0+b1*xx))) + sum(yy*(b0+b1*xx))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
grad <- c(- sum(exp(b0+b1*xx)/(1+exp(b0+b1*xx)))+sum(yy),
- sum(exp(b0+b1*xx)*xx/(1+exp(b0+b1*xx))) + sum(yy*xx) )
grad <- -grad
return(grad)
}
optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" )
log<-glm(reached.menarche~age, family=binomial,
data= menarche.cases )
summary(log)
optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" )
(logit<-optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" ))
plot( menarche.cases$age ,menarche.cases$reached.menarche )
abline(logit$par)
getwd()
data("mtcars")
dat<-mtcars$mpg
f1 <- function(x){
mu <- x[1]
sigma <- x[2]
n=length(dat)
likelihood<-(n*log(1/ sqrt(2*pi*sigma^2)) - (1/(2*sigma^2))*sum((dat-mu)^2))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
mu <- x[1]
sigma <- x[2]
n=length(dat)
grad <- c((-1/sigma^2)*sum(dat-mu),
n*2*pi*sigma + sigma^(-3)*sum((dat-mu)^2))
grad <- -grad
return(grad)
}
optim(par = c(mean(dat),sd(dat)),fn = f1, grr, method ="Nelder-Mead" )
mean(dat);sd(dat)
require("MASS")
menarche[c(1, 10, 25), ]
menarche.cases[c(1000, 1500, 2000), ]
menarche.cases$age<- jitter(menarche.cases$age)
f1 <- function(x){#negative log likelihood
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
likelihood<- -sum(log(1+exp(b0+b1*xx))) + sum(yy*(b0+b1*xx))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
grad <- c(- sum(exp(b0+b1*xx)/(1+exp(b0+b1*xx)))+sum(yy),
- sum(exp(b0+b1*xx)*xx/(1+exp(b0+b1*xx))) + sum(yy*xx) )
grad <- -grad
return(grad)
}
(logit<-optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" ))
plot( menarche.cases$age ,menarche.cases$reached.menarche )
(logit<-optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" ))
plot( menarche.cases$age ,menarche.cases$reached.menarche )
```{r}
menarche.cases$age<- jitter(menarche.cases$age)
f1 <- function(x){#negative log likelihood
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
likelihood<- -sum(log(1+exp(b0+b1*xx))) + sum(yy*(b0+b1*xx))
return(-likelihood)
}
grr <- function(x) { ## Gradient of 'fr'
b0 <- x[1]
b1 <- x[2]
xx<- menarche.cases$age;
yy<- menarche.cases$reached.menarche
grad <- c(- sum(exp(b0+b1*xx)/(1+exp(b0+b1*xx)))+sum(yy),
- sum(exp(b0+b1*xx)*xx/(1+exp(b0+b1*xx))) + sum(yy*xx) )
grad <- -grad
return(grad)
}
(logit<-optim(par = c(0,0), fn = f1, grr, method ="Nelder-Mead" ))
plot( menarche.cases$age ,menarche.cases$reached.menarche )
plot( menarche.cases$age ,menarche.cases$reached.menarche )
y<- logit$par %*% cbind(1,menarche.cases$Age)
y
cbind(1,menarche.cases$Age)
dim(menarche.cases)
cbind(rep(1,3918),menarche.cases$Age)
y<- logit$par %*% cbind(rep(1,3918),menarche.cases$age)
head(cbind(rep(1,3918),menarche.cases$age))
y<-  cbind(rep(1,3918),menarche.cases$age) %*% logit$par
y
logit_verse<-function(x){
exp(x)/(1+exp(x))
}
lines(x = y, y= logit_verse(y))
plot(x = y, y= logit_verse(y))
plot( x=y ,menarche.cases$reached.menarche )
plot(x = y, y= logit_verse(y))
plot( x=y ,menarche.cases$reached.menarche )
lines(x = y, y= logit_verse(y))
abline(h=.5)
abline(h=.5,v=0)
library(filehash)
install.packages("filehash")
install.packages("tikzDevice")
library("tikzDevice")
plot( x=y ,menarche.cases$reached.menarche, xlab = "linear form:y=x*beta", ylab = "p" )
lines(x = y, y= logit_verse(y))
abline(h=.5,v=0)
log<-glm(reached.menarche~age, family=binomial,
data= menarche.cases )
summary(log)
