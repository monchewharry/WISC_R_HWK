library(png)
vg <- readPNG("Van_Gogh.png")
vg
str(vg)
dim(vg)
red.vg <- vg[,,1]
green.vg <- vg[,,2]
blue.vg <- vg[,,3]
class(blue.vg)
nrow(matrix(1:10,nrow = 3))
nrow(matrix(1:10,nrow = 2))
(matrix(1:10,nrow = 2))
row(matrix(1:10,nrow = 2))
mfilter<-function(mat,k){
if(!is.matrix(mat)){
return("bad data")
}else{
mf<-outer(1:nrow(mat),1:ncol(mat),FUN = function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2]))
return(mf)
}
}
m<- matrix(1:10,nrow = 5)
mfilter(m,1)
mat<- matrix(1:10,nrow = 5)
outer(1:nrow(mat),1:ncol(mat),FUN = function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2]))
outer(1:nrow(mat),1:ncol(mat),FUN = function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*1^2]))
outer(1:nrow(mat),1:ncol(mat),FUN = function(x,y) x)
mat
outer(1:nrow(mat),1:ncol(mat),FUN = function(x,y) sum(row(mat)-x))
row(mat)
row(mat)-1
sum(row(mat)-1)
mapply(function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2])), row(mat), col(mat)
mapply(function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2]), row(mat), col(mat)
```
mapply(function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2]), row(mat), col(mat))
mapply(function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*1^2]), row(mat), col(mat))
?mapply
a<-mapply(function(x,y) mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*1^2]), row(mat), col(mat))
matrix(a,dim(mat))
mfilter<-function(mat,k){
if(!is.matrix(mat)){
return("bad data")
}else{
mf<-mapply(function(x,y)mean(mat[(row(mat)-x)^2+(col(mat)-y)^2<=2*k^2]), row(mat), col(mat))
mf<-matrix(mf,dim(mat))
return(mf)
}
}
mat<- matrix(1:10,nrow = 5)
mfilter(m,1)
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
k=120
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
library(persp3d)
install.packages("persp3d")
library(rgl)
?persp3d
persp3d(x=seq(-k,k,by = 0.1),y=seq(-k,k,by = 0.1),z=z)
persp3d(x=seq(-k,k,by = 0.1),y=seq(-k,k,by = 0.1),z=z)
persp3d(x=seq(-k,k,by = 0.1),y=seq(-k,k,by = 0.1),z=z(seq(-k,k,by = 0.1),seq(-k,k,by = 0.1)))
persp3d(x=x,y=y,z= outer(x,y,z) )
x=seq(-k,k,by = 0.1);y=seq(-k,k,by = 0.1)
persp3d(x=x,y=y,z= outer(x,y,z) )
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
?optim
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
initials=c(0,0)
optim(initials,fn = z,method ="Nelder-Mead")
initials=c(0,0)
optim(initials,fn = z,method ="Nelder-Mead")
optim(par = initials,fn = z,method ="Nelder-Mead")
z<-function(x,y){
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
k=120
optim(par = initials,fn = z,method ="Nelder-Mead")
optim(par =c(1,1),fn = z,method ="Nelder-Mead")
z<-function(b){
x<-b[1]
y<-b[2]
(1-x/k)*(1+x/k)*(1-y/k)*(1+y/k)*(-(y+47)*sin(sqrt(abs(y+x/2+47)))-x*sin(sqrt(abs(x-(y+47)))))
}
initials=c(0,0)
optim(par =c(1,1),fn = z,method ="Nelder-Mead")
persp3d(z,xlim = c(-k,k),ylim = c(-k,k))
row(mat)
row(matrix(1:10,100))
row(matrix(1:10,10))
row(matrix(1:10,nrow = 10))
(matrix(1:10,nrow = 10))
(matrix(1:100,nrow = 10))
row(matrix(1:100,nrow = 10))
col(matrix(1:100,nrow = 10))
dim(col(matrix(1:100,nrow = 10)))
dim(col(matrix(1:100,nrow = )))
dim(col(matrix(1:100,nrow = 5)))
install.packages("png")
if (!require("png")) {
stopifnot(require("png"))
}
vg <- readPNG("Van_Gogh.png");class(vg)
red.vg <- vg[,,1]
green.vg <- vg[,,2]
blue.vg <- vg[,,3]
image(t(red.vg[nrow(red.vg):1,]), main="Raw") # image() needs to rotate and flip matrices for display
0.5*4
(0.5*4)/9
padMat <- function(mat,k){
pad.Mat <- matrix(0, dim(mat)[1]+2*k, dim(mat)[2]+2*k)
pad.Mat[(k+1):(dim(mat)[1]+k), (k+1):(dim(mat)[2]+k)] <- mat
return(pad.Mat)
}
padMat(matrix(1:9),3)
padMat(matrix(1:9,3),1)
?mapply
padM<-padMat(matrix(1:9,3),1)
row(padMm)
row(padM)
padMm
padM
padM[<1,]
padM[c(1,2,3),c(1,2,3)]
padM[c(4,5,6),c(4,5,6)]
padMat <- function(mat,k){
pad.Mat <- matrix(0, dim(mat)[1]+2*k, dim(mat)[2]+2*k)
pad.Mat[(k+1):(dim(mat)[1]+k), (k+1):(dim(mat)[2]+k)] <- mat
return(pad.Mat)
}
padAve <- function(padM,k){
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)])
return(mf)
}
library(parallel)
mfilter <- function(padM,k){
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)])
return(mf)
}
mfilter
mfilter(padM = padM,k = 1)
padM
12/6
12/9
28/9
mfilter <- function(padM,k){
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)])
return(matrix(mf,r-2*k))
}
mf<-mclapply(1:3,function(x) mfilter(vg[,,x],1),mc.cores = 3)
mfilter(padM = padM,k = k)
mfilter(padM = padM,k = 1)
padM <- matrix(1:100,20)
padM
mfilter(padM = padM,1)
mfilter <- function(m,k){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)])
return(matrix(mf,r-2*k))
}
padM <-
mfilter(padM = matrix(1:100,20),1)
mfilter(m = matrix(1:100,20),1)
mfilter(m = ,1)
matrix(1:100,20)
mean(c(58:60,78:80,98:100))
sum(c(79,80,99,100))/9
mfilter(m = matrix(1:100,20),2)
mfilter <- function(m,k,cores=2){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
return(matrix(mf,r-2*k))
}
dim(vg)
mf<-mclapply(1:3,function(x) mfilter(vg[,,x],1),cores = 4)
mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=1)
mf
system.time(mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=1))
?array
class(mf)
array(mf)
mf.array<-array(mf)
class(mf.array)
dim(mf.array)
dim(vg)
array(mf,dim = dim(vg))
mf.array<-array(mf,dim = dim(vg))
mf
mf.array
mf.array[,,1]
mf.array<-as.array(mf,dim = dim(vg))
mf.array[,,1]
dim(mf.array)
dim(vg)
z <- array( NA, dim= dim(vg))
z
dim(z)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){}
for(i in seq(3)){}
for(i in seq(3)){
z[,,i] <
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- mf[[i]]
}
z
image(mf.array)
?image
?writePNG
writePNG(mf.array)
class(mf.array)
vg
dim(mf.array)
writePNG(z,target = "van_cdx.png")
writePNG(z,target = "van_k1.png")
system.time(mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=2))
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- mf[[i]]
}
writePNG(z,target = "van_k2.png")
system.time(mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=3))
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- mf[[i]]
}
writePNG(z,target = "van_k2.png")
system.time(mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=3))
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- mf[[i]]
}
writePNG(z,target = "van_k3.png")
system.time(mf<-mclapply(1:3,function(x,k,cores) mfilter(vg[,,x],k=k,cores=cores),cores = 4,k=2))
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- mf[[i]]
}
writePNG(z,target = "van_k2.png")
edgedetect <- function(m,k,cores=2){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) sd(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
mf <- matrix(mf,r-2*k)
mf[mf>quantile(mf,probs = 0.99)] <-1
return(mf)
}
system.time(mf<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k))
library(parallel)
edgedetect <- function(m,k,cores=2){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) sd(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
mf <- matrix(mf,r-2*k)
mf[mf>quantile(mf,probs = 0.99)] <-1
return(mf)
}
k=1
mf<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k)
edge.finding<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.finding[[i]]
}
writePNG(z,target = "van_edge.png")
k=1;p=0.90
edge.finding<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.finding[[i]]
}
writePNG(z,target = "van_edge90%.png")
k=1;p=0.99
edge.finding<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.finding[[i]]
}
writePNG(z,target = "van_edge99%.png")
class(z)
dim(z)
if (!require("png")) {
install.packages("png")
stopifnot(require("png"))
}
vg <- readPNG("Van_Gogh.png")
madison <- readPNG("Madison.png")
library(parallel)
#padding
padMat <- function(mat,k){
pad.Mat <- matrix(0, dim(mat)[1]+2*k, dim(mat)[2]+2*k)
pad.Mat[(k+1):(dim(mat)[1]+k), (k+1):(dim(mat)[2]+k)] <- mat
return(pad.Mat)
}
mfilter <- function(m,k,cores=2){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) mean(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
return(matrix(mf,r-2*k))
}
edgedetect <- function(m,k,cores=2,p){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) sd(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
mf <- matrix(mf,r-2*k)
mf[mf>quantile(mf,probs = p)] <-1
return(mf)
}
k=1;p=0.99
edge.finding<-mclapply(1:3,function(x,k,cores) edgedetect(vg[,,x],k=k,cores=cores),cores = 4,k=k)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.finding[[i]]
}
edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
red.ch<-edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
writePNG(red.ch,target = "redCh_van_edge90%.png")
k=1;p=0.90
red.ch<-edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
k=1;p=0.99
red.ch<-edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
writePNG(red.ch,target = "redCh_van_edge99%.png")
k=1;p=0.99
red.ch<-edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
writePNG(red.ch,target = "redCh_van_edge99%.png")
k=1;p=0.90
red.ch<-edgedetect(red.vg <- vg[,,1],k=k,cores = 4,p = p)
writePNG(red.ch,target = "redCh_van_edge90%.png")
matrix(1:10,2)
a<-matrix(1:10,2)
a>1
```{r}
if (!require("png")) {
install.packages("png")
stopifnot(require("png"))
}
vg <- readPNG("Van_Gogh.png")
madison <- readPNG("Madison.png")
library(parallel)
#padding
padMat <- function(mat,k){# to pad a matrix
pad.Mat <- matrix(0, dim(mat)[1]+2*k, dim(mat)[2]+2*k)
pad.Mat[(k+1):(dim(mat)[1]+k), (k+1):(dim(mat)[2]+k)] <- mat
return(pad.Mat)
}
edgedetect <- function(m,k,cores=2,p){
padM <- padMat(mat = m,k = k)
r<-dim(padM)[1]
c<-dim(padM)[2]
mf<-mcmapply(FUN = function(r,c) sd(padM[(r-k):(r+k),(c-k):(c+k)])
, row(padM)[(k+1):(r-k), (k+1):(c-k)]
, col(padM)[(k+1):(r-k), (k+1):(c-k)]
, mc.cores = cores)
mf <- matrix(mf,r-2*k)
return(mf>quantile(mf,probs = p))
}
red.vg <- vg[,,1]
k=1;p=0.99
edge.finding <- edgedetect(m = red.vg,cores = 4,k = k,p = p)
edge.finding
edge.white <- lapply(1:3,function(x) vg[,,x][edge.finding] <- 1)
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.white[[i]]
}
writePNG(z,target = "van_edge99%.png")
z
edge.finding
red.vg[edge.finding]
red.vg
a
a > 1
class(a > 1)
b<- a > 1
b
a[b]
a[as.vector(b)]
as.vector(b)
b
b<- a > 5
b
as.vector(b)
a[b]
a[b]<-0
a
b
sum(edge.finding == TRUE)
dim(edge.finding)
374*800
sum(red.vg==1)
sum((red.vg[edge.finding]<-1)==1)
red.vg[edge.finding]
red.vg[edge.finding] <-1
red.vg[edge.finding] ==1
sum(red.vg==1)
k=1;p=0.99
edge.finding <- edgedetect(m = red.vg,cores = 4,k = k,p = p)
edge.white <- sapply(1:3,function(x) vg[,,x][edge.finding] <- 1)
class(edge.white)
edge.white
edge.white <- lapply(1:3,function(x) vg[,,x][edge.finding] <- 1;return(vg[,,x]))
edge.white <- lapply(1:3,function(x) {vg[,,x][edge.finding] <- 1;return(vg[,,x])})
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.white[[i]]
}
writePNG(z,target = "van_edge99%.png")
k=1;p=0.90
edge.finding <- edgedetect(m = red.vg,cores = 4,k = k,p = p)
edge.white <- lapply(1:3,function(x) {vg[,,x][edge.finding] <- 1;return(vg[,,x])})
z <- array( NA, dim= dim(vg))
for(i in seq(3)){
z[,,i] <- edge.white[[i]]
}
writePNG(z,target = "van_edge90%.png")
k=1;p=0.99
edge.finding <- edgedetect(m = red.vg,cores = 4,k = k,p = p)
red.mad <- madison[,,1]
edge.finding <- edgedetect(m = red.mad,cores = 4,k = k,p = p)
edge.white <- lapply(1:3,function(x) {madison[,,x][edge.finding] <- 1;return(madison[,,x])})
z <- array( NA, dim= dim(madison))
for(i in seq(3)){
z[,,i] <- edge.white[[i]]
}
writePNG(z,target = "madison_edge99%.png")
k=1;p=0.90
edge.finding <- edgedetect(m = red.mad,cores = 4,k = k,p = p)
edge.white <- lapply(1:3,function(x) {madison[,,x][edge.finding] <- 1;return(madison[,,x])})
z <- array( NA, dim= dim(madison))
for(i in seq(3)){
z[,,i] <- edge.white[[i]]
}
writePNG(z,target = "madison_edge90%.png")
